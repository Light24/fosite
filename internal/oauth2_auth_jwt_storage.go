// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/fosite/handler/oauth2 (interfaces: AuthorizeJwtGrantStorage)

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	jose "gopkg.in/square/go-jose.v2"
)

// MockAuthorizeJwtGrantStorage is a mock of AuthorizeJwtGrantStorage interface
type MockAuthorizeJwtGrantStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizeJwtGrantStorageMockRecorder
}

// MockAuthorizeJwtGrantStorageMockRecorder is the mock recorder for MockAuthorizeJwtGrantStorage
type MockAuthorizeJwtGrantStorageMockRecorder struct {
	mock *MockAuthorizeJwtGrantStorage
}

// NewMockAuthorizeJwtGrantStorage creates a new mock instance
func NewMockAuthorizeJwtGrantStorage(ctrl *gomock.Controller) *MockAuthorizeJwtGrantStorage {
	mock := &MockAuthorizeJwtGrantStorage{ctrl: ctrl}
	mock.recorder = &MockAuthorizeJwtGrantStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorizeJwtGrantStorage) EXPECT() *MockAuthorizeJwtGrantStorageMockRecorder {
	return m.recorder
}

// GetPublicKey mocks base method
func (m *MockAuthorizeJwtGrantStorage) GetPublicKey(arg0 context.Context, arg1, arg2, arg3 string) (*jose.JSONWebKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*jose.JSONWebKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey
func (mr *MockAuthorizeJwtGrantStorageMockRecorder) GetPublicKey(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockAuthorizeJwtGrantStorage)(nil).GetPublicKey), arg0, arg1, arg2, arg3)
}

// GetPublicKeyScopes mocks base method
func (m *MockAuthorizeJwtGrantStorage) GetPublicKeyScopes(arg0 context.Context, arg1, arg2, arg3 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKeyScopes", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeyScopes indicates an expected call of GetPublicKeyScopes
func (mr *MockAuthorizeJwtGrantStorageMockRecorder) GetPublicKeyScopes(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeyScopes", reflect.TypeOf((*MockAuthorizeJwtGrantStorage)(nil).GetPublicKeyScopes), arg0, arg1, arg2, arg3)
}

// GetPublicKeys mocks base method
func (m *MockAuthorizeJwtGrantStorage) GetPublicKeys(arg0 context.Context, arg1, arg2 string) (*jose.JSONWebKeySet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKeys", arg0, arg1, arg2)
	ret0, _ := ret[0].(*jose.JSONWebKeySet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeys indicates an expected call of GetPublicKeys
func (mr *MockAuthorizeJwtGrantStorageMockRecorder) GetPublicKeys(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeys", reflect.TypeOf((*MockAuthorizeJwtGrantStorage)(nil).GetPublicKeys), arg0, arg1, arg2)
}

// IsJWTUsed mocks base method
func (m *MockAuthorizeJwtGrantStorage) IsJWTUsed(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsJWTUsed", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsJWTUsed indicates an expected call of IsJWTUsed
func (mr *MockAuthorizeJwtGrantStorageMockRecorder) IsJWTUsed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsJWTUsed", reflect.TypeOf((*MockAuthorizeJwtGrantStorage)(nil).IsJWTUsed), arg0, arg1)
}

// MarkJWTUsedForTime mocks base method
func (m *MockAuthorizeJwtGrantStorage) MarkJWTUsedForTime(arg0 context.Context, arg1 string, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkJWTUsedForTime", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkJWTUsedForTime indicates an expected call of MarkJWTUsedForTime
func (mr *MockAuthorizeJwtGrantStorageMockRecorder) MarkJWTUsedForTime(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkJWTUsedForTime", reflect.TypeOf((*MockAuthorizeJwtGrantStorage)(nil).MarkJWTUsedForTime), arg0, arg1, arg2)
}
